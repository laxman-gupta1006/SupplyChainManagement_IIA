<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Merchant Two - Advanced Supply Chain Analytics</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #ec4899;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --dark-bg: #0f172a;
            --card-bg: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --border-color: #334155;
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* Animated Background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            z-index: -2;
        }

        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--dark-bg);
            opacity: 0.9;
            z-index: -1;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Main Layout */
        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            text-align: center;
            padding: 60px 0 40px;
            position: relative;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            background: radial-gradient(circle, rgba(99, 102, 241, 0.1) 0%, transparent 70%);
            border-radius: 50%;
            z-index: -1;
        }

        .header h1 {
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 700;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 16px;
            letter-spacing: -0.02em;
        }

        .header p {
            font-size: 1.25rem;
            color: var(--text-secondary);
            font-weight: 400;
            max-width: 600px;
            margin: 0 auto;
        }

        .header-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            background: var(--gradient-accent);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Stats Grid */
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 16px;
            padding: 32px 24px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--gradient-primary);
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.3s ease;
        }

        .stat-card:hover::before {
            transform: scaleX(1);
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-lg);
            border-color: var(--primary-color);
        }

        .stat-card:nth-child(2)::before {
            background: var(--gradient-secondary);
        }

        .stat-card:nth-child(3)::before {
            background: var(--gradient-accent);
        }

        .stat-card:nth-child(4)::before {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }

        .stat-card h3 {
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin: 0;
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary-color);
            font-size: 1.5rem;
        }

        .stat-card:nth-child(2) .stat-icon {
            background: rgba(236, 72, 153, 0.1);
            color: var(--secondary-color);
        }

        .stat-card:nth-child(3) .stat-icon {
            background: rgba(6, 182, 212, 0.1);
            color: var(--accent-color);
        }

        .stat-card:nth-child(4) .stat-icon {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
        }

        .stat-card .value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-primary);
            line-height: 1;
            margin-bottom: 8px;
        }

        .stat-trend {
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--success-color);
            font-size: 0.875rem;
            font-weight: 500;
        }

        /* Controls */
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 32px;
            padding: 24px;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 16px;
            backdrop-filter: blur(10px);
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 400px;
            min-width: 280px;
        }

        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
            font-size: 1rem;
        }

        .search-box {
            width: 100%;
            padding: 14px 16px 14px 48px;
            background: var(--dark-bg);
            border: 2px solid var(--border-color);
            border-radius: 12px;
            color: var(--text-primary);
            font-size: 15px;
            font-weight: 400;
            outline: none;
            transition: all 0.3s ease;
        }

        .search-box:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
        }

        .search-box::placeholder {
            color: var(--text-secondary);
        }

        .controls-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .btn:hover::before {
            transform: translateX(0);
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 8px 20px rgba(99, 102, 241, 0.3);
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background: #059669;
            transform: translateY(-1px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.3);
        }

        .btn-danger {
            background: var(--error-color);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
            transform: translateY(-1px);
            box-shadow: 0 8px 20px rgba(239, 68, 68, 0.3);
        }

        .btn-secondary {
            background: var(--card-bg);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
        }

        .btn-secondary:hover {
            background: var(--border-color);
            transform: translateY(-1px);
        }

        /* Table Container */
        .table-container {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 16px;
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .table-header {
            padding: 24px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .table-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .table-subtitle {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-top: 4px;
        }

        .table-scroll {
            overflow-x: auto;
            max-height: 600px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            min-width: 1200px;
        }

        th {
            background: rgba(15, 23, 42, 0.5);
            padding: 16px 20px;
            text-align: left;
            font-weight: 600;
            font-size: 0.75rem;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 1px solid var(--border-color);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        td {
            padding: 16px 20px;
            border-bottom: 1px solid rgba(51, 65, 85, 0.5);
            color: var(--text-primary);
            font-size: 14px;
            font-weight: 400;
            vertical-align: middle;
        }

        tbody tr {
            transition: all 0.2s ease;
        }

        tbody tr:hover {
            background: rgba(99, 102, 241, 0.05);
            transform: scale(1.001);
        }

        tbody tr:last-child td {
            border-bottom: none;
        }

        /* Status & Quality Indicators */
        .status-badge, .quality-badge, .profit-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-active {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .status-inactive {
            background: rgba(239, 68, 68, 0.1);
            color: var(--error-color);
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .quality-high {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
        }

        .quality-medium {
            background: rgba(245, 158, 11, 0.1);
            color: var(--warning-color);
        }

        .quality-low {
            background: rgba(239, 68, 68, 0.1);
            color: var(--error-color);
        }

        .profit-positive {
            color: var(--success-color);
            font-weight: 600;
        }

        .profit-negative {
            color: var(--error-color);
            font-weight: 600;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(8px);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            opacity: 1;
        }

        .modal-content {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            margin: 2% auto;
            padding: 0;
            border-radius: 20px;
            width: 95%;
            max-width: 900px;
            max-height: 90vh;
            overflow: hidden;
            position: relative;
            transform: scale(0.9) translateY(50px);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: scale(1) translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e9ecef;
        }

        .close {
            position: absolute;
            top: 20px;
            right: 24px;
            color: rgba(255, 255, 255, 0.8);
            font-size: 28px;
            font-weight: 300;
            cursor: pointer;
            z-index: 2;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
            transform: rotate(90deg);
        }

        .form-group {
            position: relative;
            margin-bottom: 24px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-color);
            font-weight: 500;
            font-size: 0.875rem;
        }

        .form-group input, 
        .form-group select {
            width: 100%;
            padding: 16px;
            background: var(--input-bg);
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 14px;
            color: var(--text-color);
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-group input:focus, 
        .form-group select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            transform: translateY(-1px);
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
            margin-bottom: 16px;
        }

        .form-row-3 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 16px;
        }

        .modal-header {
            padding: 24px 32px;
            background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
            border-radius: 20px 20px 0 0;
            position: relative;
            overflow: hidden;
        }

        .modal-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .modal-header h2 {
            color: white;
            margin: 0;
            font-size: clamp(1.25rem, 3vw, 1.75rem);
            font-weight: 600;
            position: relative;
            z-index: 1;
        }

        .modal-body {
            padding: 32px;
            max-height: calc(90vh - 200px);
            overflow-y: auto;
        }

        .section-title {
            color: var(--primary-color);
            font-size: 1.25rem;
            font-weight: 600;
            margin: 32px 0 20px 0;
            padding-bottom: 8px;
            border-bottom: 2px solid rgba(99, 102, 241, 0.2);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-actions {
            display: flex;
            gap: 16px;
            justify-content: flex-end;
            padding: 24px 32px;
            background: var(--surface-color);
            border-radius: 0 0 20px 20px;
            border-top: 1px solid var(--border-color);
        }

        .btn-secondary {
            background: var(--surface-color);
            color: var(--text-color);
            border: 2px solid var(--border-color);
            padding: 12px 24px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-secondary:hover {
            background: var(--hover-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }

            .modal-header h2 {
                font-size: 1.25rem;
            }

            .modal-body {
                padding: 20px;
            }

            .form-row,
            .form-row-3 {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .form-actions {
                padding: 20px;
                flex-direction: column-reverse;
            }

            .btn-primary,
            .btn-secondary {
                width: 100%;
                justify-content: center;
            }

            .close {
                top: 16px;
                right: 16px;
                font-size: 24px;
            }
        }

        @media (max-width: 480px) {
            .modal-content {
                width: 98%;
                margin: 2% auto;
                border-radius: 12px;
            }

            .modal-header {
                padding: 20px;
                border-radius: 12px 12px 0 0;
            }

            .modal-body {
                padding: 16px;
            }

            .form-actions {
                padding: 16px;
                border-radius: 0 0 12px 12px;
            }
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            color: #6c757d;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }

        .success {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }

        .profit-positive {
            color: #28a745;
            font-weight: bold;
        }

        .profit-negative {
            color: #dc3545;
            font-weight: bold;
        }

        .status-active {
            color: #28a745;
            font-weight: bold;
        }

        .status-inactive {
            color: #dc3545;
            font-weight: bold;
        }

        .quality-high {
            color: #28a745;
            font-weight: bold;
        }

        .quality-medium {
            color: #ffc107;
            font-weight: bold;
        }

        .quality-low {
            color: #dc3545;
            font-weight: bold;
        }

        @media (max-width: 768px) {
            .container {
                margin: 0;
                border-radius: 0;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .stats {
                grid-template-columns: 1fr 1fr;
                padding: 20px;
            }
            
            .table-container {
                padding: 15px;
            }
            
            th, td {
                padding: 8px;
                font-size: 12px;
            }
            
            .form-row, .form-row-3 {
                grid-template-columns: 1fr;
            }
        }

        /* Add better message styles */
        .message-toast {
            transition: all 0.3s ease;
        }

        /* Ensure modal z-index is proper */
        .modal {
            z-index: 1000;
        }

        /* Better button states */
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Loading state for save button */
        .btn-loading {
            position: relative;
            color: transparent;
        }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-right-color: transparent;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🏢 Merchant Two Dashboard</h1>
            <p>Advanced Supply Chain Analytics & Product Management</p>
        </div>

        <!-- Statistics Dashboard -->
        <div class="stats" id="statsContainer">
            <div class="stat-card">
                <h3>Total Products</h3>
                <div class="value" id="totalProducts">-</div>
            </div>
            <div class="stat-card">
                <h3>Total Revenue</h3>
                <div class="value" id="totalRevenue">-</div>
            </div>
            <div class="stat-card">
                <h3>Average Price</h3>
                <div class="value" id="avgPrice">-</div>
            </div>
            <div class="stat-card">
                <h3>Product Categories</h3>
                <div class="value" id="productTypes">-</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <input type="text" id="searchBox" class="search-box" placeholder="🔍 Search by Product ID, category, vendor, or location...">
            <button class="btn" id="refreshBtn">🔄 Refresh Data</button>
            <button class="btn btn-success" id="addNewBtn">➕ Add New Product</button>
        </div>

        <!-- Data Table -->
        <div class="table-container">
            <div id="loading" class="loading">Loading data...</div>
            <div id="error" class="error" style="display: none;"></div>
            
            <table id="dataTable" style="display: none;">
                <thead>
                    <tr>
                        <th>Product ID</th>
                        <th>Category</th>
                        <th>Price ($)</th>
                        <th>Units Sold</th>
                        <th>Revenue ($)</th>
                        <th>Stock Level</th>
                        <th>Status</th>
                        <th>Vendor</th>
                        <th>Location</th>
                        <th>Quality Score</th>
                        <th>Net Profit ($)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="dataTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><span id="modalTitle">Edit Product</span>: <span id="editProductID"></span></h2>
                <span class="close" id="closeModalBtn">&times;</span>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <!-- Product Information -->
                    <h3 class="section-title">📦 Product Information</h3>
                <div class="form-row" id="productIdRow" style="display: none;">
                    <div class="form-group">
                        <label for="editProductIDInput">Product ID:</label>
                        <input type="text" id="editProductIDInput" required>
                    </div>
                    <div class="form-group">
                        <!-- Empty for spacing -->
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editCategory">Category:</label>
                        <select id="editCategory" required>
                            <option value="cosmetics">Cosmetics</option>
                            <option value="skincare">Skincare</option>
                            <option value="haircare">Haircare</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editUnitPrice">Unit Price ($):</label>
                        <input type="number" id="editUnitPrice" step="0.01" min="0" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="editUnitsSold">Units Sold:</label>
                        <input type="number" id="editUnitsSold" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="editSalesRevenue">Sales Revenue ($):</label>
                        <input type="number" id="editSalesRevenue" step="0.01" min="0" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="editProfitMargin">Profit Margin (%):</label>
                        <input type="number" id="editProfitMargin" step="0.1" min="0" max="100" required>
                    </div>
                    <div class="form-group">
                        <label for="editStockLevel">Stock Level:</label>
                        <input type="number" id="editStockLevel" min="0" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="editProductStatus">Product Status:</label>
                        <select id="editProductStatus" required>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                            <option value="Discontinued">Discontinued</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editSeasonalDemand">Seasonal Demand:</label>
                        <select id="editSeasonalDemand" required>
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                        </select>
                    </div>
                </div>

                <!-- Supply Chain Information -->
                <h3 class="section-title">🚚 Supply Chain Information</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editVendorName">Vendor Name:</label>
                        <select id="editVendorName" required>
                            <option value="Supplier 1">Supplier 1</option>
                            <option value="Supplier 2">Supplier 2</option>
                            <option value="Supplier 3">Supplier 3</option>
                            <option value="Supplier 4">Supplier 4</option>
                            <option value="Supplier 5">Supplier 5</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editFacilityLocation">Facility Location:</label>
                        <select id="editFacilityLocation" required>
                            <option value="Mumbai">Mumbai</option>
                            <option value="Delhi">Delhi</option>
                            <option value="Bangalore">Bangalore</option>
                            <option value="Chennai">Chennai</option>
                            <option value="Kolkata">Kolkata</option>
                        </select>
                    </div>
                </div>

                <div class="form-row-3">
                    <div class="form-group">
                        <label for="editProcessingDays">Processing Days:</label>
                        <input type="number" id="editProcessingDays" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="editOutputQuantity">Output Quantity:</label>
                        <input type="number" id="editOutputQuantity" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="editProductionExpenses">Production Expenses ($):</label>
                        <input type="number" id="editProductionExpenses" step="0.01" min="0" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="editLogisticsProvider">Logistics Provider:</label>
                        <select id="editLogisticsProvider" required>
                            <option value="Carrier A">Carrier A</option>
                            <option value="Carrier B">Carrier B</option>
                            <option value="Carrier C">Carrier C</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editShippingMethod">Shipping Method:</label>
                        <select id="editShippingMethod" required>
                            <option value="Road">Road</option>
                            <option value="Air">Air</option>
                            <option value="Sea">Sea</option>
                            <option value="Rail">Rail</option>
                        </select>
                    </div>
                </div>

                <div class="form-row-3">
                    <div class="form-group">
                        <label for="editFreightCharges">Freight Charges ($):</label>
                        <input type="number" id="editFreightCharges" step="0.01" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="editQualityScore">Quality Score (1-10):</label>
                        <input type="number" id="editQualityScore" step="0.1" min="1" max="10" required>
                    </div>
                    <div class="form-group">
                        <label for="editReorderPoint">Reorder Point:</label>
                        <input type="number" id="editReorderPoint" min="0" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="editWarehouseZone">Warehouse Zone:</label>
                        <select id="editWarehouseZone" required>
                            <option value="Zone-A">Zone-A</option>
                            <option value="Zone-B">Zone-B</option>
                            <option value="Zone-C">Zone-C</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editSustainabilityIndex">Sustainability Index (0-100):</label>
                        <input type="number" id="editSustainabilityIndex" min="0" max="100" required>
                    </div>
                </div>
                </form>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-secondary" id="cancelBtn">❌ Cancel</button>
                <button type="button" class="btn-primary" id="saveBtn">💾 Save Changes</button>
            </div>
        </div>
    </div>

    <script>
        let allData = [];
        let filteredData = [];
        let currentProductId = null; // Track current product being edited
        let isCreating = false; // Track if we're creating or editing

        // Load data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('� DOM Content Loaded - Initializing application...');
            
            loadData();
            loadStats();
            
            // Add search functionality
            document.getElementById('searchBox').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                filterData(searchTerm);
            });
            
            // Add button event listeners
            document.getElementById('refreshBtn').addEventListener('click', refreshData);
            document.getElementById('addNewBtn').addEventListener('click', addNewProduct);
            document.getElementById('closeModalBtn').addEventListener('click', closeModal);
            document.getElementById('cancelBtn').addEventListener('click', closeModal);
            
            // **FIXED: Proper save button event listener**
            document.getElementById('saveBtn').addEventListener('click', handleSave);
            
            // Add event delegation for edit and delete buttons
            document.getElementById('dataTableBody').addEventListener('click', function(e) {
                if (e.target.classList.contains('edit-btn')) {
                    const productId = e.target.getAttribute('data-product-id');
                    editProduct(productId);
                } else if (e.target.classList.contains('delete-btn')) {
                    const productId = e.target.getAttribute('data-product-id');
                    deleteProduct(productId);
                }
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('editModal');
                if (event.target === modal) {
                    closeModal();
                }
            });
        });

        // **FIXED: Separate save handler function**
        async function handleSave(e) {
            console.log('💾 Save button clicked!', e);
            e.preventDefault();
            e.stopPropagation();
            
            try {
                // Get form data
                const formData = getFormData();
                
                // Validate form
                if (!validateForm(formData)) {
                    return;
                }
                
                // Determine if we're creating or updating
                const url = isCreating ? '/api/products' : `/api/products/${currentProductId}`;
                const method = isCreating ? 'POST' : 'PUT';
                
                console.log('🌐 Making API request:', { url, method, formData });
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('📡 Response status:', response.status);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('✅ Operation successful:', result);
                
                if (result.success) {
                    closeModal();
                    await loadData();
                    await loadStats();
                    const action = isCreating ? 'created' : 'updated';
                    showMessage(`Product ${action} successfully!`, 'success');
                } else {
                    throw new Error(result.message || `${isCreating ? 'Create' : 'Update'} failed`);
                }
            } catch (error) {
                console.error('❌ Error saving product:', error);
                showMessage(`Failed to ${isCreating ? 'create' : 'update'} product: ${error.message}`, 'error');
            }
        }

        // **NEW: Get form data function**
        function getFormData() {
            const formData = {
                category: document.getElementById('editCategory').value,
                unit_price: parseFloat(document.getElementById('editUnitPrice').value) || 0,
                units_sold: parseInt(document.getElementById('editUnitsSold').value) || 0,
                sales_revenue: parseFloat(document.getElementById('editSalesRevenue').value) || 0,
                profit_margin: parseFloat(document.getElementById('editProfitMargin').value) || 0,
                stock_level: parseInt(document.getElementById('editStockLevel').value) || 0,
                product_status: document.getElementById('editProductStatus').value,
                seasonal_demand: document.getElementById('editSeasonalDemand').value,
                vendor_name: document.getElementById('editVendorName').value,
                facility_location: document.getElementById('editFacilityLocation').value,
                processing_days: parseInt(document.getElementById('editProcessingDays').value) || 0,
                output_quantity: parseInt(document.getElementById('editOutputQuantity').value) || 0,
                production_expenses: parseFloat(document.getElementById('editProductionExpenses').value) || 0,
                logistics_provider: document.getElementById('editLogisticsProvider').value,
                shipping_method: document.getElementById('editShippingMethod').value,
                freight_charges: parseFloat(document.getElementById('editFreightCharges').value) || 0,
                quality_score: parseFloat(document.getElementById('editQualityScore').value) || 0,
                reorder_point: parseInt(document.getElementById('editReorderPoint').value) || 0,
                warehouse_zone: document.getElementById('editWarehouseZone').value,
                sustainability_index: parseInt(document.getElementById('editSustainabilityIndex').value) || 0
            };
            
            // Add product_id for new products
            if (isCreating) {
                const productIdInput = document.getElementById('editProductIDInput').value.trim();
                if (!productIdInput) {
                    throw new Error('Product ID is required for new products');
                }
                formData.product_id = productIdInput;
            }
            
            return formData;
        }

        // **NEW: Form validation function**
        function validateForm(formData) {
            // Basic required field validation
            if (isCreating && !formData.product_id) {
                showMessage('Product ID is required', 'error');
                document.getElementById('editProductIDInput').focus();
                return false;
            }
            
            if (!formData.category) {
                showMessage('Category is required', 'error');
                document.getElementById('editCategory').focus();
                return false;
            }
            
            if (formData.unit_price <= 0) {
                showMessage('Unit price must be greater than 0', 'error');
                document.getElementById('editUnitPrice').focus();
                return false;
            }
            
            // Validate quality score range
            if (formData.quality_score < 1 || formData.quality_score > 10) {
                showMessage('Quality score must be between 1 and 10', 'error');
                document.getElementById('editQualityScore').focus();
                return false;
            }
            
            return true;
        }

        // Load main data
        async function loadData() {
            try {
                document.getElementById('loading').style.display = 'block';
                document.getElementById('error').style.display = 'none';
                document.getElementById('dataTable').style.display = 'none';

                const response = await fetch('/api/products');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                allData = await response.json();
                filteredData = [...allData];
                
                document.getElementById('loading').style.display = 'none';
                document.getElementById('dataTable').style.display = 'table';
                
                renderTable(filteredData);
                
            } catch (error) {
                console.error('Error loading data:', error);
                document.getElementById('loading').style.display = 'none';
                document.getElementById('error').style.display = 'block';
                document.getElementById('error').textContent = `Failed to load data: ${error.message}`;
            }
        }

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const stats = await response.json();
                console.log('Stats received:', stats); // Debug log
                
                // **FIXED: Properly parse PostgreSQL numeric values**
                const totalProducts = parseInt(stats.totalProducts[0]?.count) || 0;
                const totalRevenue = parseFloat(stats.totalRevenue[0]?.total) || 0;
                const avgPrice = parseFloat(stats.avgPrice[0]?.avg) || 0;
                const productTypes = stats.categories?.length || 0;
                
                document.getElementById('totalProducts').textContent = totalProducts.toLocaleString();
                document.getElementById('totalRevenue').textContent = '$' + totalRevenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                document.getElementById('avgPrice').textContent = '$' + avgPrice.toFixed(2);
                document.getElementById('productTypes').textContent = productTypes.toString();
                
            } catch (error) {
                console.error('Error loading stats:', error);
                // Set default values on error
                document.getElementById('totalProducts').textContent = '0';
                document.getElementById('totalRevenue').textContent = '$0.00';
                document.getElementById('avgPrice').textContent = '$0.00';
                document.getElementById('productTypes').textContent = '0';
            }
        }

        // Render data table
        function renderTable(data) {
            const tbody = document.getElementById('dataTableBody');
            tbody.innerHTML = '';

            if (data.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="12" style="text-align: center; padding: 40px; color: var(--text-secondary);">No products found</td>`;
                tbody.appendChild(row);
                return;
            }

            data.forEach(item => {
                const row = document.createElement('tr');
                
                const netProfit = item.net_profit || 0;
                const profitClass = netProfit >= 0 ? 'profit-positive' : 'profit-negative';
                const statusClass = item.product_status === 'Active' ? 'status-active' : 'status-inactive';
                
                let qualityClass = 'quality-medium';
                if (item.quality_score >= 8.5) qualityClass = 'quality-high';
                else if (item.quality_score < 7.5) qualityClass = 'quality-low';

                row.innerHTML = `
                    <td>${item.product_id}</td>
                    <td>${item.category}</td>
                    <td>$${parseFloat(item.unit_price || 0).toFixed(2)}</td>
                    <td>${parseInt(item.units_sold || 0).toLocaleString()}</td>
                    <td>$${parseFloat(item.sales_revenue || 0).toLocaleString('en-US', { maximumFractionDigits: 2 })}</td>
                    <td>${item.stock_level || 0}</td>
                    <td class="${statusClass}">${item.product_status || 'N/A'}</td>
                    <td>${item.vendor_name || 'N/A'}</td>
                    <td>${item.facility_location || 'N/A'}</td>
                    <td class="${qualityClass}">${item.quality_score ? parseFloat(item.quality_score).toFixed(1) : 'N/A'}</td>
                    <td class="${profitClass}">$${parseFloat(netProfit).toLocaleString('en-US', { maximumFractionDigits: 2 })}</td>
                    <td>
                        <button class="btn edit-btn" data-product-id="${item.product_id}">✏️ Edit</button>
                        <button class="btn btn-danger delete-btn" data-product-id="${item.product_id}">🗑️ Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Filter data based on search term
        function filterData(searchTerm) {
            if (!searchTerm) {
                filteredData = [...allData];
            } else {
                filteredData = allData.filter(item => 
                    item.product_id.toLowerCase().includes(searchTerm) ||
                    item.category.toLowerCase().includes(searchTerm) ||
                    (item.vendor_name && item.vendor_name.toLowerCase().includes(searchTerm)) ||
                    (item.facility_location && item.facility_location.toLowerCase().includes(searchTerm)) ||
                    item.product_status.toLowerCase().includes(searchTerm)
                );
            }
            renderTable(filteredData);
        }

        // Add new product
        function addNewProduct() {
            console.log('🆕 Add New Product function called');
            
            try {
                // Clear all form fields
                document.getElementById('editForm').reset();
                
                // Set mode
                isCreating = true;
                currentProductId = null;
                
                // Show modal in create mode
                document.getElementById('modalTitle').textContent = 'Add New Product';
                document.getElementById('editProductID').textContent = 'New';
                document.getElementById('productIdRow').style.display = 'grid';
                
                const modal = document.getElementById('editModal');
                modal.style.display = 'block';
                setTimeout(() => {
                    modal.classList.add('show');
                    console.log('✨ Modal animation class added');
                }, 10);
                
                console.log('✅ Add new product modal opened successfully');
            } catch (error) {
                console.error('❌ Error in addNewProduct:', error);
                showMessage('Error opening add product form: ' + error.message, 'error');
            }
        }

        // Edit product
        function editProduct(productId) {
            console.log('✏️ Edit Product function called with ID:', productId);
            
            const product = allData.find(p => p.product_id === productId);
            
            if (!product) {
                console.error('❌ Product not found for ID:', productId);
                showMessage('Product not found!', 'error');
                return;
            }

            try {
                // Set mode
                isCreating = false;
                currentProductId = productId;
                
                // Show modal in edit mode
            document.getElementById('modalTitle').textContent = 'Edit Product';
            document.getElementById('editProductID').textContent = productId;
            document.getElementById('productIdRow').style.display = 'none';

            // Populate modal with product data
            document.getElementById('editCategory').value = product.category;
            document.getElementById('editUnitPrice').value = product.unit_price;
            document.getElementById('editUnitsSold').value = product.units_sold;
            document.getElementById('editSalesRevenue').value = product.sales_revenue;
            document.getElementById('editProfitMargin').value = product.profit_margin;
            document.getElementById('editStockLevel').value = product.stock_level;
            document.getElementById('editProductStatus').value = product.product_status;
            document.getElementById('editSeasonalDemand').value = product.seasonal_demand;
            
            // Supply chain data
            document.getElementById('editVendorName').value = product.vendor_name || '';
            document.getElementById('editFacilityLocation').value = product.facility_location || '';
            document.getElementById('editProcessingDays').value = product.processing_days || '';
            document.getElementById('editOutputQuantity').value = product.output_quantity || '';
            document.getElementById('editProductionExpenses').value = product.production_expenses || '';
            document.getElementById('editLogisticsProvider').value = product.logistics_provider || '';
            document.getElementById('editShippingMethod').value = product.shipping_method || '';
            document.getElementById('editFreightCharges').value = product.freight_charges || '';
            document.getElementById('editQualityScore').value = product.quality_score || '';
            document.getElementById('editReorderPoint').value = product.reorder_point || '';
            document.getElementById('editWarehouseZone').value = product.warehouse_zone || '';
            document.getElementById('editSustainabilityIndex').value = product.sustainability_index || '';

                const modal = document.getElementById('editModal');
                modal.style.display = 'block';
                setTimeout(() => {
                    modal.classList.add('show');
                }, 10);
                
            } catch (error) {
                console.error('❌ Error in editProduct:', error);
                showMessage('Error loading product data: ' + error.message, 'error');
            }
        }

        // Close modal with animation
        function closeModal() {
            const modal = document.getElementById('editModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
                // Reset form state
                document.getElementById('productIdRow').style.display = 'none';
                isCreating = false;
                currentProductId = null;
            }, 300);
        }

        // Delete product
        async function deleteProduct(productId) {
            if (!confirm(`Are you sure you want to delete product ${productId}? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/products/${productId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    await loadData();
                    await loadStats();
                    showMessage('Product deleted successfully!', 'success');
                } else {
                    throw new Error(result.message || 'Delete failed');
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                showMessage(`Failed to delete product: ${error.message}`, 'error');
            }
        }

        // Refresh data
        async function refreshData() {
            await loadData();
            await loadStats();
            showMessage('Data refreshed successfully!', 'success');
        }

        // Show message
        function showMessage(message, type) {
            // Remove any existing messages
            const existingMessages = document.querySelectorAll('.message-toast');
            existingMessages.forEach(msg => msg.remove());
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message-toast ${type}`;
            messageDiv.textContent = message;
            messageDiv.style.position = 'fixed';
            messageDiv.style.top = '20px';
            messageDiv.style.right = '20px';
            messageDiv.style.zIndex = '1001';
            messageDiv.style.padding = '15px 20px';
            messageDiv.style.borderRadius = '8px';
            messageDiv.style.maxWidth = '300px';
            messageDiv.style.fontWeight = '500';
            messageDiv.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';
            
            if (type === 'success') {
                messageDiv.style.background = 'var(--success-color)';
                messageDiv.style.color = 'white';
            } else {
                messageDiv.style.background = 'var(--error-color)';
                messageDiv.style.color = 'white';
            }

            document.body.appendChild(messageDiv);

            setTimeout(() => {
                messageDiv.style.opacity = '0';
                messageDiv.style.transition = 'opacity 0.3s ease';
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.remove();
                    }
                }, 300);
            }, 3000);
        }


    </script>
</body>
</html>