<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Integrated Supply Chain Dashboard - Federated Query System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #ec4899;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --dark-bg: #0f172a;
            --card-bg: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --border-color: #334155;
            --merchant1-color: #8b5cf6;
            --merchant2-color: #ec4899;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* Animated Background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            z-index: -2;
        }

        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--dark-bg);
            opacity: 0.95;
            z-index: -1;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            text-align: center;
            padding: 40px 0 30px;
            position: relative;
        }

        .header h1 {
            font-size: clamp(2rem, 4vw, 3rem);
            font-weight: 800;
            background: linear-gradient(135deg, var(--merchant1-color), var(--merchant2-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 12px;
            letter-spacing: -0.02em;
        }

        .header p {
            font-size: 1.1rem;
            color: var(--text-secondary);
            font-weight: 400;
        }

        .header-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(99, 102, 241, 0.1);
            border: 1px solid rgba(99, 102, 241, 0.3);
            border-radius: 20px;
            font-size: 0.85rem;
            margin-top: 12px;
            color: var(--primary-color);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 16px;
            padding: 24px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--merchant1-color), var(--merchant2-color));
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.3s ease;
        }

        .stat-card:hover::before {
            transform: scaleX(1);
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 12px;
        }

        .stat-breakdown {
            display: flex;
            gap: 16px;
            font-size: 0.875rem;
        }

        .stat-merchant {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .merchant-badge {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .merchant1-badge { background: var(--merchant1-color); }
        .merchant2-badge { background: var(--merchant2-color); }

        /* Query Section */
        .query-section {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 32px;
            margin-bottom: 30px;
        }

        .query-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 24px;
        }

        .query-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .ai-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 12px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            color: white;
        }

        .query-input-container {
            position: relative;
            margin-bottom: 20px;
        }

        .query-input {
            width: 100%;
            padding: 18px 200px 18px 20px;
            background: var(--dark-bg);
            border: 2px solid var(--border-color);
            border-radius: 16px;
            color: var(--text-primary);
            font-size: 1rem;
            font-weight: 400;
            outline: none;
            transition: all 0.3s ease;
        }

        .query-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
        }

        .query-input::placeholder {
            color: var(--text-secondary);
        }

        .query-actions {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            gap: 8px;
        }

        .visualize-toggle-btn {
            background: var(--card-bg);
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 12px 16px;
            color: var(--text-secondary);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .visualize-toggle-btn:hover {
            border-color: var(--accent-color);
            color: var(--accent-color);
            transform: scale(1.05);
        }

        .visualize-toggle-btn.active {
            background: linear-gradient(135deg, var(--accent-color), var(--primary-color));
            border-color: var(--accent-color);
            color: white;
            box-shadow: 0 4px 12px rgba(6, 182, 212, 0.4);
        }

        .visualize-toggle-btn.active:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 16px rgba(6, 182, 212, 0.6);
        }

        .query-submit-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .query-submit-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(99, 102, 241, 0.4);
        }

        .query-submit-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Examples */
        .examples-section {
            margin-top: 24px;
        }

        .examples-header {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: 12px;
            font-weight: 500;
        }

        .examples-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 12px;
        }

        .example-chip {
            padding: 10px 16px;
            background: rgba(99, 102, 241, 0.1);
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 12px;
            font-size: 0.875rem;
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .example-chip:hover {
            background: rgba(99, 102, 241, 0.2);
            border-color: rgba(99, 102, 241, 0.4);
            transform: translateY(-2px);
        }

        /* Results Section */
        .results-section {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 20px;
            padding: 32px;
            display: none;
        }

        .results-section.show {
            display: block;
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-color);
        }

        .results-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .clear-btn {
            padding: 8px 16px;
            background: var(--dark-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            color: var(--text-primary);
            cursor: pointer;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .clear-btn:hover {
            background: var(--border-color);
        }

        /* AI Insights styling */
        .ai-insights {
            background: linear-gradient(135deg, rgba(6, 182, 212, 0.15), rgba(99, 102, 241, 0.15));
            border: 2px solid var(--accent-color);
            border-radius: 16px;
            padding: 24px;
            margin-bottom: 24px;
            animation: slideDown 0.5s ease;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .insights-header {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--accent-color);
            font-size: 1.1rem;
            font-weight: 700;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .insights-header i {
            font-size: 1.3rem;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.8;
            }
        }

        .insights-text {
            color: var(--text-primary);
            font-size: 1.05rem;
            line-height: 1.6;
            margin: 0;
            font-weight: 500;
        }

        .result-explanation {
            padding: 16px;
            background: rgba(99, 102, 241, 0.1);
            border-left: 4px solid var(--primary-color);
            border-radius: 8px;
            margin-bottom: 24px;
            color: var(--text-secondary);
        }

        .result-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 24px;
        }

        .result-merchant-section {
            background: var(--dark-bg);
            border-radius: 12px;
            padding: 20px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .result-merchant-section.merchant1 {
            border-color: var(--merchant1-color);
        }

        .result-merchant-section.merchant2 {
            border-color: var(--merchant2-color);
        }

        .merchant-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 16px;
        }

        .merchant-header h4 {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .result-table-container {
            overflow-x: auto;
            max-height: 400px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: rgba(99, 102, 241, 0.1);
            padding: 12px;
            text-align: left;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-secondary);
            position: sticky;
            top: 0;
        }

        td {
            padding: 12px;
            border-bottom: 1px solid var(--border-color);
            font-size: 0.875rem;
        }

        tbody tr:hover {
            background: rgba(99, 102, 241, 0.05);
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }

        /* Loading State */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            padding: 40px;
            color: var(--text-secondary);
        }

        .spinner {
            width: 24px;
            height: 24px;
            border: 3px solid rgba(99, 102, 241, 0.3);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Toast Messages */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 12px;
            min-width: 300px;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .toast.success { border-left: 4px solid var(--success-color); }
        .toast.error { border-left: 4px solid var(--error-color); }
        .toast.info { border-left: 4px solid var(--accent-color); }

        /* Responsive */
        @media (max-width: 768px) {
            .result-grid {
                grid-template-columns: 1fr;
            }

            .examples-grid {
                grid-template-columns: 1fr;
            }

            .query-submit-btn {
                position: static;
                transform: none;
                width: 100%;
                justify-content: center;
                margin-top: 12px;
            }

            .query-input {
                padding: 18px 20px;
            }
        }

        .sql-query-display {
            background: rgba(15, 23, 42, 0.5);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 12px;
            margin-top: 12px;
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
            color: var(--accent-color);
            overflow-x: auto;
        }

        .aggregated-result {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(236, 72, 153, 0.1));
            border: 2px solid var(--primary-color);
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }

        .aggregated-result h4 {
            margin-bottom: 16px;
            color: var(--primary-color);
        }

        .aggregated-display {
            width: 100%;
        }

        .agg-summary {
            display: flex;
            gap: 20px;
            margin-bottom: 16px;
            padding: 16px;
            background: rgba(99, 102, 241, 0.05);
            border-radius: 8px;
        }

        .agg-stat {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .agg-label {
            font-size: 0.85rem;
            color: var(--text-secondary);
        }

        .agg-value {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .merchant1-text {
            color: var(--primary-color);
        }

        .merchant2-text {
            color: var(--secondary-color);
        }

        .agg-note {
            font-size: 0.9rem;
            color: var(--text-secondary);
            font-style: italic;
            margin: 8px 0;
        }

        .agg-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 16px;
        }

        .agg-card {
            background: rgba(99, 102, 241, 0.05);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 16px;
            transition: all 0.3s ease;
        }

        .agg-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
        }

        .agg-card-main {
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.15), rgba(236, 72, 153, 0.15));
            border: 2px solid var(--primary-color);
            grid-column: 1 / -1;
        }

        .agg-card-main .agg-card-value {
            font-size: 2rem;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .agg-card-label {
            font-size: 0.85rem;
            color: var(--text-secondary);
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .agg-card-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .agg-breakdown {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
        }

        .agg-breakdown h5 {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .breakdown-items {
            display: flex;
            gap: 12px;
        }

        .breakdown-item {
            flex: 1;
            padding: 12px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .breakdown-item.merchant1 {
            background: rgba(99, 102, 241, 0.1);
            border: 1px solid var(--primary-color);
        }

        .breakdown-item.merchant2 {
            background: rgba(236, 72, 153, 0.1);
            border: 1px solid var(--secondary-color);
        }

        .breakdown-merchant {
            font-size: 0.9rem;
            font-weight: 600;
        }

        .breakdown-item.merchant1 .breakdown-merchant {
            color: var(--primary-color);
        }

        .breakdown-item.merchant2 .breakdown-merchant {
            color: var(--secondary-color);
        }

        .breakdown-value {
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        /* Source badge for combined results */
        .source-badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 600;
            color: white;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .source-badge.merchant1-badge {
            background: var(--primary-color);
        }

        .source-badge.merchant2-badge {
            background: var(--secondary-color);
        }

        /* Null value styling */
        .null-value {
            color: var(--text-secondary);
            font-style: italic;
            opacity: 0.5;
        }

        /* Chart visualization styles */
        .chart-container {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 24px;
            margin-top: 24px;
            border: 2px solid var(--border-color);
        }

        .chart-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .chart-header h4 {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--accent-color);
            font-size: 1.2rem;
        }

        .chart-type-selector {
            display: flex;
            gap: 8px;
            background: var(--dark-bg);
            padding: 4px;
            border-radius: 8px;
        }

        .chart-type-btn {
            background: transparent;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
        }

        .chart-type-btn:hover {
            background: var(--card-bg);
            color: var(--text-primary);
        }

        .chart-type-btn.active {
            background: var(--accent-color);
            color: white;
        }

        .chart-canvas-wrapper {
            position: relative;
            height: 400px;
            width: 100%;
        }

        .chart-canvas-wrapper canvas {
            max-height: 400px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🔗 Integrated Supply Chain Dashboard</h1>
            <p>Federated Query System - AI-Powered Natural Language Database Access</p>
            <div class="header-badge">
                <i class="fas fa-database"></i>
                <span>2 PostgreSQL Databases Connected</span>
            </div>
        </div>

        <!-- Statistics Dashboard -->
        <div class="stats-grid" id="statsGrid">
            <div class="stat-card">
                <div class="stat-label">Total Products</div>
                <div class="stat-value" id="totalProducts">-</div>
                <div class="stat-breakdown">
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant1-badge"></div>
                        <span id="m1Products">-</span>
                    </div>
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant2-badge"></div>
                        <span id="m2Products">-</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-label">Total Revenue</div>
                <div class="stat-value" id="totalRevenue">-</div>
                <div class="stat-breakdown">
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant1-badge"></div>
                        <span id="m1Revenue">-</span>
                    </div>
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant2-badge"></div>
                        <span id="m2Revenue">-</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-label">Average Price</div>
                <div class="stat-value" id="avgPrice">-</div>
                <div class="stat-breakdown">
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant1-badge"></div>
                        <span id="m1AvgPrice">-</span>
                    </div>
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant2-badge"></div>
                        <span id="m2AvgPrice">-</span>
                    </div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-label">Product Types</div>
                <div class="stat-value" id="productTypes">-</div>
                <div class="stat-breakdown">
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant1-badge"></div>
                        <span id="m1Types">-</span>
                    </div>
                    <div class="stat-merchant">
                        <div class="merchant-badge merchant2-badge"></div>
                        <span id="m2Types">-</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Query Section -->
        <div class="query-section">
            <div class="query-header">
                <h2>Natural Language Query</h2>
                <div class="ai-badge">
                    <i class="fas fa-brain"></i>
                    <span>Powered by Gemini AI</span>
                </div>
            </div>

            <div class="query-input-container">
                <input 
                    type="text" 
                    id="queryInput" 
                    class="query-input" 
                    placeholder="Ask anything... e.g., 'Show me total revenue from all merchants' or 'List products with low stock'"
                >
                <div class="query-actions">
                    <button id="visualizeToggle" class="visualize-toggle-btn" title="Enable/Disable Visualization">
                        <i class="fas fa-chart-bar"></i>
                        <span>Visualize</span>
                    </button>
                    <button id="queryBtn" class="query-submit-btn">
                        <i class="fas fa-search"></i>
                        <span>Query</span>
                    </button>
                </div>
            </div>

            <div class="examples-section">
                <div class="examples-header">
                    <i class="fas fa-lightbulb"></i> Quick Examples - Click to try:
                </div>
                <div class="examples-grid" id="examplesGrid">
                    <div class="example-chip" data-query="Show me total revenue from all merchants">
                        📊 Total revenue from all merchants
                    </div>
                    <div class="example-chip" data-query="List all cosmetics products">
                        💄 List all cosmetics products
                    </div>
                    <div class="example-chip" data-query="Show me products with stock level below 50">
                        📦 Products with low stock
                    </div>
                    <div class="example-chip" data-query="Which merchant has higher total sales?">
                        🏆 Compare merchant sales
                    </div>
                    <div class="example-chip" data-query="Show me all suppliers from both merchants">
                        🚚 List all suppliers
                    </div>
                    <div class="example-chip" data-query="What is the average product price across both merchants?">
                        💰 Average product price
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results-section" id="resultsSection">
            <div class="results-header">
                <h3>Query Results</h3>
                <button class="clear-btn" id="clearBtn">
                    <i class="fas fa-times"></i> Clear
                </button>
            </div>
            
            <div id="resultsContent"></div>
        </div>
    </div>

    <script>
        let currentQuery = null;
        let visualizeMode = false;
        let currentChart = null;

        // Load stats on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Query button
            document.getElementById('queryBtn').addEventListener('click', executeQuery);
            
            // Visualize toggle button
            document.getElementById('visualizeToggle').addEventListener('click', function() {
                visualizeMode = !visualizeMode;
                this.classList.toggle('active');
                
                if (visualizeMode) {
                    showToast('Visualization mode enabled 📊', 'success');
                } else {
                    showToast('Visualization mode disabled', 'info');
                }
            });
            
            // Enter key in input
            document.getElementById('queryInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    executeQuery();
                }
            });

            // Example chips
            document.querySelectorAll('.example-chip').forEach(chip => {
                chip.addEventListener('click', function() {
                    const query = this.getAttribute('data-query');
                    document.getElementById('queryInput').value = query;
                    executeQuery();
                });
            });

            // Clear button
            document.getElementById('clearBtn').addEventListener('click', clearResults);
        }

        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const stats = await response.json();

                // Combined stats
                document.getElementById('totalProducts').textContent = stats.combined.totalProducts.toLocaleString();
                document.getElementById('totalRevenue').textContent = '$' + stats.combined.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                document.getElementById('avgPrice').textContent = '$' + stats.combined.avgPrice.toFixed(2);
                document.getElementById('productTypes').textContent = (stats.merchant1.productTypes + stats.merchant2.productTypes);

                // Merchant 1 breakdown
                document.getElementById('m1Products').textContent = 'M1: ' + stats.merchant1.totalProducts.toLocaleString();
                document.getElementById('m1Revenue').textContent = '$' + stats.merchant1.totalRevenue.toLocaleString(undefined, {maximumFractionDigits: 0});
                document.getElementById('m1AvgPrice').textContent = '$' + stats.merchant1.avgPrice.toFixed(2);
                document.getElementById('m1Types').textContent = stats.merchant1.productTypes;

                // Merchant 2 breakdown
                document.getElementById('m2Products').textContent = 'M2: ' + stats.merchant2.totalProducts.toLocaleString();
                document.getElementById('m2Revenue').textContent = '$' + stats.merchant2.totalRevenue.toLocaleString(undefined, {maximumFractionDigits: 0});
                document.getElementById('m2AvgPrice').textContent = '$' + stats.merchant2.avgPrice.toFixed(2);
                document.getElementById('m2Types').textContent = stats.merchant2.productTypes;

            } catch (error) {
                console.error('Error loading stats:', error);
                showToast('Failed to load statistics', 'error');
            }
        }

        async function executeQuery() {
            const queryInput = document.getElementById('queryInput');
            const question = queryInput.value.trim();

            if (!question) {
                showToast('Please enter a query', 'error');
                return;
            }

            const queryBtn = document.getElementById('queryBtn');
            queryBtn.disabled = true;
            queryBtn.innerHTML = '<div class="spinner"></div><span>Processing...</span>';

            const resultsSection = document.getElementById('resultsSection');
            const resultsContent = document.getElementById('resultsContent');
            
            resultsSection.classList.add('show');
            resultsContent.innerHTML = '<div class="loading"><div class="spinner"></div><span>Processing your query with AI...</span></div>';

            try {
                const response = await fetch('/api/query', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ question })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Query failed');
                }

                currentQuery = data;
                displayResults(data);
                showToast('Query executed successfully!', 'success');

            } catch (error) {
                console.error('Query error:', error);
                resultsContent.innerHTML = `
                    <div class="no-results">
                        <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: var(--error-color); margin-bottom: 16px;"></i>
                        <h3>Query Failed</h3>
                        <p>${error.message}</p>
                    </div>
                `;
                showToast('Query failed: ' + error.message, 'error');
            } finally {
                queryBtn.disabled = false;
                queryBtn.innerHTML = '<i class="fas fa-search"></i><span>Query</span>';
            }
        }

        function displayResults(data) {
            const resultsContent = document.getElementById('resultsContent');
            let html = '';

            // AI Insights - Show prominently at the top if available
            if (data.insights) {
                html += `
                    <div class="ai-insights">
                        <div class="insights-header">
                            <i class="fas fa-lightbulb"></i>
                            <strong>AI Insights</strong>
                        </div>
                        <p class="insights-text">${data.insights}</p>
                    </div>
                `;
            }

            // Explanation
            html += `
                <div class="result-explanation">
                    <strong><i class="fas fa-info-circle"></i> Query Analysis:</strong><br>
                    ${data.explanation}
                </div>
            `;

            // Show SQL queries
            if (data.queries.merchant1) {
                html += `
                    <div class="sql-query-display">
                        <strong>🔹 Merchant_one Query:</strong><br>
                        ${escapeHtml(data.queries.merchant1)}
                    </div>
                `;
            }

            if (data.queries.merchant2) {
                html += `
                    <div class="sql-query-display">
                        <strong>🔸 Merchant_two Query:</strong><br>
                        ${escapeHtml(data.queries.merchant2)}
                    </div>
                `;
            }

            html += '<div class="result-grid">';

            // Merchant 1 results
            if (data.results.merchant1 && data.results.merchant1.length > 0) {
                html += `
                    <div class="result-merchant-section merchant1">
                        <div class="merchant-header">
                            <div class="merchant-badge merchant1-badge"></div>
                            <h4>Merchant_one Results (${data.results.merchant1.length})</h4>
                        </div>
                        <div class="result-table-container">
                            ${generateTable(data.results.merchant1)}
                        </div>
                    </div>
                `;
            }

            // Merchant 2 results
            if (data.results.merchant2 && data.results.merchant2.length > 0) {
                html += `
                    <div class="result-merchant-section merchant2">
                        <div class="merchant-header">
                            <div class="merchant-badge merchant2-badge"></div>
                            <h4>Merchant_two Results (${data.results.merchant2.length})</h4>
                        </div>
                        <div class="result-table-container">
                            ${generateTable(data.results.merchant2)}
                        </div>
                    </div>
                `;
            }

            html += '</div>';

            // Aggregated results
            if (data.aggregated) {
                html += `
                    <div class="aggregated-result">
                        <h4><i class="fas fa-chart-bar"></i> Combined Results</h4>
                        ${generateAggregatedTable(data.aggregated)}
                    </div>
                `;
            }

            // No results
            if ((!data.results.merchant1 || data.results.merchant1.length === 0) && 
                (!data.results.merchant2 || data.results.merchant2.length === 0)) {
                html += `
                    <div class="no-results">
                        <i class="fas fa-inbox" style="font-size: 3rem; color: var(--text-secondary); margin-bottom: 16px;"></i>
                        <h3>No Results Found</h3>
                        <p>Your query executed successfully but returned no data.</p>
                    </div>
                `;
            }

            resultsContent.innerHTML = html;
            
            // Generate chart if visualization mode is enabled
            if (visualizeMode) {
                generateChart(data);
            }
        }

        function generateTable(data) {
            if (!data || data.length === 0) return '<p>No data</p>';

            const hasSource = data.some(row => row._source);
            const keys = Object.keys(data[0]).filter(k => k !== '_source'); // Exclude internal fields
            let html = '<table><thead><tr>';
            
            // Add Source column header if data has source information
            if (hasSource) {
                html += `<th>Source</th>`;
            }
            
            keys.forEach(key => {
                html += `<th>${formatColumnName(key)}</th>`;
            });
            
            html += '</tr></thead><tbody>';

            data.forEach(row => {
                html += '<tr>';
                
                // Add source badge if available
                if (hasSource) {
                    const source = row._source || 'Unknown';
                    const badgeClass = source === 'Merchant_one' ? 'merchant1-badge' : 'merchant2-badge';
                    html += `<td><span class="source-badge ${badgeClass}">${source}</span></td>`;
                }
                
                keys.forEach(key => {
                    let value = row[key];
                    
                    // Handle null/undefined values
                    if (value === null || value === undefined) {
                        html += `<td class="null-value">-</td>`;
                        return;
                    }
                    
                    // Format numbers with proper detection
                    const numValue = parseFloat(value);
                    if (!isNaN(numValue) && value !== null && value !== '') {
                        if (key.toLowerCase().includes('price') || key.toLowerCase().includes('revenue') || 
                            key.toLowerCase().includes('cost') || key.toLowerCase().includes('charges') || 
                            key.toLowerCase().includes('expenses') || key.toLowerCase().includes('total') ||
                            key.toLowerCase().includes('sales') || key.toLowerCase().includes('contribution') ||
                            key.toLowerCase().includes('combined') || key.toLowerCase().includes('average') ||
                            key.toLowerCase().includes('margin')) {
                            value = '$' + numValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                        } else {
                            value = numValue.toLocaleString();
                        }
                    }
                    
                    html += `<td>${escapeHtml(String(value))}</td>`;
                });
                html += '</tr>';
            });

            html += '</tbody></table>';
            return html;
        }

        function generateAggregatedTable(aggregated) {
            if (!aggregated) return '<p>No aggregated data</p>';
            
            let html = '<div class="aggregated-display">';
            
            // Handle different aggregation formats
            if (aggregated.combined_data) {
                // Multi-row combined data
                html += `
                    <div class="agg-summary">
                        <div class="agg-stat">
                            <span class="agg-label">Total Records:</span>
                            <span class="agg-value">${aggregated.total_records || 0}</span>
                        </div>
                        <div class="agg-stat">
                            <span class="agg-label">Merchant_one:</span>
                            <span class="agg-value merchant1-text">${aggregated.merchant1_records || 0}</span>
                        </div>
                        <div class="agg-stat">
                            <span class="agg-label">Merchant_two:</span>
                            <span class="agg-value merchant2-text">${aggregated.merchant2_records || 0}</span>
                        </div>
                    </div>
                    ${aggregated.note ? `<p class="agg-note">${aggregated.note}</p>` : ''}
                    <div class="result-table-container">
                        ${generateTable(aggregated.combined_data)}
                    </div>
                `;
            } else {
                // Single-value aggregation (totals, averages, etc.)
                html += '<div class="agg-summary-grid">';
                
                Object.entries(aggregated).forEach(([key, value]) => {
                    if (key === 'breakdown') {
                        // Skip breakdown for main display
                        return;
                    }
                    
                    if (key === 'note') {
                        html += `<p class="agg-note" style="grid-column: 1/-1;">${value}</p>`;
                        return;
                    }
                    
                    const displayValue = formatAggregatedValue(key, value);
                    const isMain = key.toLowerCase().includes('combined') || key.toLowerCase().includes('total_combined');
                    
                    html += `
                        <div class="agg-card ${isMain ? 'agg-card-main' : ''}">
                            <div class="agg-card-label">${formatColumnName(key)}</div>
                            <div class="agg-card-value">${displayValue}</div>
                        </div>
                    `;
                });
                
                html += '</div>';
                
                // Show breakdown if available
                if (aggregated.breakdown && Array.isArray(aggregated.breakdown)) {
                    html += `
                        <div class="agg-breakdown">
                            <h5>Breakdown by Merchant:</h5>
                            <div class="breakdown-items">
                    `;
                    aggregated.breakdown.forEach(item => {
                        const merchantClass = item.merchant === 'Merchant_one' ? 'merchant1' : 'merchant2';
                        html += `
                            <div class="breakdown-item ${merchantClass}">
                                <span class="breakdown-merchant">${item.merchant}</span>
                                <span class="breakdown-value">${formatAggregatedValue('value', item.value)}</span>
                            </div>
                        `;
                    });
                    html += `
                            </div>
                        </div>
                    `;
                }
            }
            
            html += '</div>';
            return html;
        }

        function formatAggregatedValue(key, value) {
            const numValue = parseFloat(value);
            if (!isNaN(numValue)) {
                if (key.toLowerCase().includes('price') || key.toLowerCase().includes('revenue') || 
                    key.toLowerCase().includes('cost') || key.toLowerCase().includes('total') ||
                    key.toLowerCase().includes('sales') || key.toLowerCase().includes('contribution') ||
                    key.toLowerCase().includes('combined') || key.toLowerCase().includes('average') ||
                    key.toLowerCase().includes('value')) {
                    return '$' + numValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                }
                return numValue.toLocaleString();
            }
            return value;
        }

        function formatColumnName(name) {
            return name.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function clearResults() {
            document.getElementById('resultsSection').classList.remove('show');
            document.getElementById('resultsContent').innerHTML = '';
            document.getElementById('queryInput').value = '';
            currentQuery = null;
            
            // Destroy existing chart
            if (currentChart) {
                currentChart.destroy();
                currentChart = null;
            }
        }

        // ===== CHART GENERATION FUNCTIONS =====
        
        function generateChart(data) {
            // Destroy existing chart if any
            if (currentChart) {
                currentChart.destroy();
                currentChart = null;
            }

            // Determine what data to visualize
            let chartData = null;
            let chartTitle = '';

            // Priority: Use aggregated data first, then individual merchant data
            if (data.aggregated && data.aggregated.combined_data) {
                chartData = data.aggregated.combined_data;
                chartTitle = 'Combined Results Visualization';
            } else if (data.aggregated && !data.aggregated.combined_data) {
                // Single value aggregation (total, average, etc.)
                chartData = formatAggregatedForChart(data.aggregated);
                chartTitle = 'Aggregated Metrics';
            } else if (data.results.merchant1 && data.results.merchant1.length > 0) {
                chartData = data.results.merchant1;
                chartTitle = 'Merchant_one Results';
            } else if (data.results.merchant2 && data.results.merchant2.length > 0) {
                chartData = data.results.merchant2;
                chartTitle = 'Merchant_two Results';
            }

            if (!chartData || chartData.length === 0) {
                return; // No data to visualize
            }

            // Detect chart type based on data structure
            const chartConfig = detectChartType(chartData, data.question);
            
            // Create chart container
            const resultsContent = document.getElementById('resultsContent');
            const chartContainer = document.createElement('div');
            chartContainer.className = 'chart-container';
            chartContainer.innerHTML = `
                <div class="chart-header">
                    <h4>
                        <i class="fas fa-chart-line"></i>
                        ${chartTitle}
                    </h4>
                    <div class="chart-type-selector" id="chartTypeSelector">
                        <button class="chart-type-btn ${chartConfig.type === 'bar' ? 'active' : ''}" data-type="bar">
                            <i class="fas fa-chart-bar"></i> Bar
                        </button>
                        <button class="chart-type-btn ${chartConfig.type === 'pie' ? 'active' : ''}" data-type="pie">
                            <i class="fas fa-chart-pie"></i> Pie
                        </button>
                        <button class="chart-type-btn ${chartConfig.type === 'line' ? 'active' : ''}" data-type="line">
                            <i class="fas fa-chart-line"></i> Line
                        </button>
                        <button class="chart-type-btn ${chartConfig.type === 'doughnut' ? 'active' : ''}" data-type="doughnut">
                            <i class="fas fa-circle-notch"></i> Doughnut
                        </button>
                    </div>
                </div>
                <div class="chart-canvas-wrapper">
                    <canvas id="resultChart"></canvas>
                </div>
            `;
            
            resultsContent.appendChild(chartContainer);

            // Render the chart
            renderChart(chartConfig.type, chartData, chartConfig);

            // Add event listeners for chart type switching
            document.querySelectorAll('.chart-type-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const newType = this.getAttribute('data-type');
                    document.querySelectorAll('.chart-type-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    renderChart(newType, chartData, chartConfig);
                });
            });
        }

        function formatAggregatedForChart(aggregated) {
            // Convert aggregated single values to array format for charting
            const data = [];
            Object.entries(aggregated).forEach(([key, value]) => {
                if (key !== 'breakdown' && key !== 'note' && typeof value === 'number') {
                    data.push({
                        label: formatColumnName(key),
                        value: value
                    });
                }
            });
            return data;
        }

        function detectChartType(data, question = '') {
            const lowerQuestion = question.toLowerCase();
            const firstRow = data[0];
            
            if (!firstRow) return { type: 'bar', labelKey: null, valueKey: null };

            // Find label and value keys
            let labelKey = null;
            let valueKey = null;

            Object.entries(firstRow).forEach(([key, value]) => {
                if (key === '_source') return;
                
                if (typeof value === 'string' || key.toLowerCase().includes('type') || 
                    key.toLowerCase().includes('category') || key.toLowerCase().includes('name')) {
                    labelKey = key;
                } else if (typeof value === 'number' || !isNaN(parseFloat(value))) {
                    valueKey = key;
                }
            });

            // Special handling for formatted aggregated data
            if (firstRow.label && firstRow.value !== undefined) {
                labelKey = 'label';
                valueKey = 'value';
            }

            // Determine chart type based on query and data characteristics
            let chartType = 'bar'; // Default

            if (lowerQuestion.includes('distribution') || lowerQuestion.includes('breakdown')) {
                chartType = data.length <= 6 ? 'pie' : 'bar';
            } else if (lowerQuestion.includes('compare') || lowerQuestion.includes('comparison')) {
                chartType = 'bar';
            } else if (lowerQuestion.includes('trend') || lowerQuestion.includes('over time')) {
                chartType = 'line';
            } else if (data.length <= 5) {
                chartType = 'doughnut';
            }

            return { type: chartType, labelKey, valueKey };
        }

        function renderChart(type, data, config) {
            if (currentChart) {
                currentChart.destroy();
            }

            const ctx = document.getElementById('resultChart').getContext('2d');
            
            // Extract labels and values
            const labels = data.map(row => {
                const label = config.labelKey ? row[config.labelKey] : Object.values(row)[0];
                return String(label).substring(0, 30); // Truncate long labels
            });

            const values = data.map(row => {
                const value = config.valueKey ? row[config.valueKey] : Object.values(row).find(v => !isNaN(parseFloat(v)));
                return parseFloat(value) || 0;
            });

            // Generate colors
            const colors = generateColors(values.length);

            // Chart configuration
            const chartConfig = {
                type: type,
                data: {
                    labels: labels,
                    datasets: [{
                        label: config.valueKey ? formatColumnName(config.valueKey) : 'Value',
                        data: values,
                        backgroundColor: type === 'line' ? 'rgba(99, 102, 241, 0.2)' : colors.background,
                        borderColor: type === 'line' ? 'rgba(99, 102, 241, 1)' : colors.border,
                        borderWidth: 2,
                        tension: 0.4,
                        fill: type === 'line'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: type === 'pie' || type === 'doughnut',
                            position: 'right',
                            labels: {
                                color: '#cbd5e1',
                                font: { size: 12 }
                            }
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#f8fafc',
                            bodyColor: '#cbd5e1',
                            borderColor: '#334155',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) label += ': ';
                                    
                                    const value = context.parsed.y || context.parsed;
                                    if (config.valueKey && (config.valueKey.toLowerCase().includes('price') || 
                                        config.valueKey.toLowerCase().includes('revenue') ||
                                        config.valueKey.toLowerCase().includes('cost'))) {
                                        label += '$' + value.toLocaleString(undefined, {minimumFractionDigits: 2});
                                    } else {
                                        label += value.toLocaleString();
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    scales: type === 'bar' || type === 'line' ? {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#cbd5e1',
                                callback: function(value) {
                                    if (config.valueKey && (config.valueKey.toLowerCase().includes('price') || 
                                        config.valueKey.toLowerCase().includes('revenue') ||
                                        config.valueKey.toLowerCase().includes('cost'))) {
                                        return '$' + value.toLocaleString();
                                    }
                                    return value.toLocaleString();
                                }
                            },
                            grid: {
                                color: 'rgba(51, 65, 85, 0.3)'
                            }
                        },
                        x: {
                            ticks: {
                                color: '#cbd5e1',
                                maxRotation: 45,
                                minRotation: 0
                            },
                            grid: {
                                color: 'rgba(51, 65, 85, 0.3)'
                            }
                        }
                    } : {}
                }
            };

            currentChart = new Chart(ctx, chartConfig);
        }

        function generateColors(count) {
            const baseColors = [
                { bg: 'rgba(99, 102, 241, 0.7)', border: 'rgba(99, 102, 241, 1)' },
                { bg: 'rgba(236, 72, 153, 0.7)', border: 'rgba(236, 72, 153, 1)' },
                { bg: 'rgba(6, 182, 212, 0.7)', border: 'rgba(6, 182, 212, 1)' },
                { bg: 'rgba(16, 185, 129, 0.7)', border: 'rgba(16, 185, 129, 1)' },
                { bg: 'rgba(245, 158, 11, 0.7)', border: 'rgba(245, 158, 11, 1)' },
                { bg: 'rgba(239, 68, 68, 0.7)', border: 'rgba(239, 68, 68, 1)' },
                { bg: 'rgba(168, 85, 247, 0.7)', border: 'rgba(168, 85, 247, 1)' },
                { bg: 'rgba(34, 197, 94, 0.7)', border: 'rgba(34, 197, 94, 1)' }
            ];

            const backgrounds = [];
            const borders = [];

            for (let i = 0; i < count; i++) {
                const color = baseColors[i % baseColors.length];
                backgrounds.push(color.bg);
                borders.push(color.border);
            }

            return { background: backgrounds, border: borders };
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 
                        'fa-info-circle';
            
            toast.innerHTML = `
                <i class="fas ${icon}"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'slideIn 0.3s ease reverse';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
</body>
</html>
